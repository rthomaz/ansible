---

# parando serviços se existirem

- name: verificar serviços existentes
  stat: path=/etc/init.d/{{ item }}  
  loop:
     - smbd
     - nmbd
     - winbind
  register: service_status

- name: parar os serviços existentes
  service:
    name: '{{ item.item }}'
    state: stopped 
  when: item.stat.exists
  loop: '{{ service_status.results }}'
  loop_control:
    label: "{{ item.item }}"

# removendo os arquivos de bando de dados se existirem

# - name: verificar arquivos existentes
#   find:
#     paths: 
#       - /usr/local/samba/var/lock
#       - /usr/local/samba/var/locks
#       - /usr/local/samba/var/cache
#       - /usr/local/samba/private
#     patterns: "*.tdb,*.ldb"
#   register: arquivos_para_deletar

# - name: remover arquivos existentes
#   file:
#     path: "{{ item.path }}"
#     state: absent
#   with_items: "{{ arquivos_para_deletar.files }}"

# - name: remover arquivos existentes
#   debug:
#     msg: "{{ item }}"
#   with_items: "{{ arquivos_para_deletar.files }}"  

# remover o arquivo smb.conf existente

- name: verificar existência de smb.conf
  stat: path=/etc/samba/smb.conf
  register: smb_conf_status

- name: criar backup de smb.conf
  copy:
    src: "/etc/samba/smb.conf"
    dest: "/etc/samba/smb.conf.original"
    remote_src: yes
    backup: yes
  when: smb_conf_status.stat.exists    

- name: remover arquivo smb.conf
  file:
    path: "/etc/samba/smb.conf"
    state: absent
  when: smb_conf_status.stat.exists    

# instalar

- name: instalar dependências de pacote necessárias 
  apt:
    name: "{{ packages }}"
  vars:
    packages:
    - acl
    - attr
    - autoconf
    - bind9utils
    - bison
    - build-essential
    - debhelper
    - dnsutils
    - docbook-xml
    - docbook-xsl
    - flex
    - gdb
    - libjansson-dev
    - libacl1-dev
    - libaio-dev
    - libarchive-dev
    - libattr1-dev
    - libblkid-dev
    - libbsd-dev
    - libcap-dev
    - libcups2-dev
    - libgnutls28-dev
    - libgpgme-dev
    - libjson-perl
    - libldap2-dev
    - libncurses5-dev
    - libpam0g-dev
    - libparse-yapp-perl
    - libpopt-dev
    - libreadline-dev
    - nettle-dev
    - perl
    - perl-modules
    - pkg-config
    - python-all-dev
    - python-crypto
    - python-dbg
    - python-dev
    - python-dnspython
    - python3-dnspython
    - python-gpgme
    - python3-gpgme
    - python-markdown
    - python3-markdown
    - python3-dev
    - xsltproc
    - zlib1g-dev
    - liblmdb-dev
    - lmdb-utils

- name: instalar samba
  apt:
    name: "samba"

- name: instalar restantes dos pacotes 
  apt:
    name: "{{ packages }}"
  vars:
    packages:
    - winbind
    - libpam-winbind
    - libnss-winbind
    - libpam-krb5
    - krb5-config
    - krb5-user
    - smbclient
    - ldap-utils

# provisionar samba dc

- name: provisionar samba dc
  command: samba-tool domain provision 
    --server-role=dc 
    --use-rfc2307 
    --dns-backend=BIND9_DLZ 
    --realm='{{samba_domain_controller_realm}}'
    --domain='{{samba_domain_controller_domain}}' 
    --adminpass='{{samba_domain_controller_admin_pass}}'

# configurando kerberos

- name: configurando kerberos
  copy:
    src: "/var/lib/samba/private/krb5.conf"
    dest: "/etc/krb5.conf"
    remote_src: yes
    backup: no

# configurando back-end do dns do dc

- name: bind9
  include_tasks: bind9.yml

# configurando rotas

- name: criar ficheiro /etc/nsswitch.conf
  copy:
    src: "nsswitch.conf"
    dest: "/etc/nsswitch.conf"
    backup: yes

# reconfigurando rede

- include_role:
    name: network-interfaces-config
  vars:
    - network_interfaces_dns_search: '{{samba_domain_controller_realm | lower}}'
    - network_interfaces_dns_nameservers: 
      - '{{network_interfaces_address}}'

- include_role:
    name: resolv-config
  vars:
    - resolv_config_domain: '{{samba_domain_controller_realm | lower}}'
    - resolv_config_search: '{{samba_domain_controller_realm | lower}}'
    - resolv_config_nameservers:
      - '{{network_interfaces_address}}'

# configurando zona reversa

- debug: msg="{{ ('192.168.10'.split('.'))[::-1]|join('.') }}"
- debug: msg="{{ ('192.168.10'.split('.'))[2] }}"
- debug: msg="{{ network_interfaces_address.split('.') [2] }}"
#- name: configurar zona reversa
#  command: samba-tool dns zonecreate {{network_hostname}} 1.168.192.in-addr.arpa