- name: cria a network stack
  docker_network:
    name: stack
    driver: bridge
    
- name: cria o volume elasticsearchdata
  docker_volume:
    name: elasticsearchdata
    driver: local
    
- name: cria o volume kibanaconfig
  docker_volume:
    name: kibanaconfig
    driver: local    

- name: exclui o container do elasticsearch
  command: docker rm -f -v elasticsearch-1
  ignore_errors: yes
    
- name: cria o container do elasticsearch
  command: docker run 
    --restart=always -d 
    --name elasticsearch-1
    --mount source=elasticsearchdata,target=/usr/share/elasticsearch/data    
    --network stack    
    -p 9200:9200 
    -p 9300:9300 
    -e "cluster.name=log-cluster"
    -e "http.host=0.0.0.0" 
    -e "transport.host=127.0.0.1"
    -e "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    docker.elastic.co/elasticsearch/elasticsearch:7.2.0


    
#- name: cria o container do elasticsearch
#  docker_container:
#    name: elasticsearch-3
#    hostname: elasticsearch
#    image: docker.elastic.co/elasticsearch/elasticsearch:7.2.0
#    restart: yes
#    recreate: yes
#    state: started
#    env:
#      cluster.name: "log-cluster"
#      http.host: "0.0.0.0"
#      transport.host: "127.0.0.1"
#      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
#      bootstrap.memory_lock: "true"
#    exposed_ports:
#      - "9200"
#    volumes:
#      - elasticsearchdata:/usr/share/elasticsearch/data
#    healthcheck:
#      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
#      interval: 30s
#      timeout: 30s
#      retries: 3
#    ports:
#     - "9200:9200"
#     - "9300:9300"
#    purge_networks: yes
#    networks_cli_compatible: yes
#    networks:
#      - name: "stack"

# Fluentd

- name: cria o diret처rio /{{ workgroup_name }}/{{ docker_work_path }}/fluentd se ele n찾o existir
  file:
    path: /{{ workgroup_name }}/{{ docker_work_path }}/fluentd
    state: directory
    owner: root
    group: root
    mode: +rwx        

- name: criando Dockerfile /{{ workgroup_name }}/{{ docker_work_path }}/fluentd/Dockerfile
  template:
    src: "docker-fluentd-dockerfile.j2"
    dest: "/{{ workgroup_name }}/{{ docker_work_path }}/fluentd/Dockerfile"
    backup: yes
    mode: a+x
    owner: root
    group: root
    
- name: cria o diret처rio /{{ workgroup_name }}/{{ docker_work_path }}/fluentd/conf se ele n찾o existir
  file:
    path: /{{ workgroup_name }}/{{ docker_work_path }}/fluentd/conf
    state: directory
    owner: root
    group: root
    mode: +rwx        
    
- name: criando ficheiro /{{ workgroup_name }}/{{ docker_work_path }}/fluentd/conf/fluent.conf
  template:
    src: "fluent.conf.j2"
    dest: "/{{ workgroup_name }}/{{ docker_work_path }}/fluentd/conf/fluent.conf"
    backup: yes
    mode: a+x
    owner: root
    group: root    
    
- name: cria a imagem fluentd
  docker_image:
    name: rt-fluentd
    build:
      path: /{{ workgroup_name }}/{{ docker_work_path }}/images
      dockerfile: /{{ workgroup_name }}/{{ docker_work_path }}/fluentd/Dockerfile
      pull: yes
    push: no
    source: build

- name: exclui o container do fluentd
  command: docker rm -f -v rt-fluentd-1
  ignore_errors: yes

- name: cria o container fluentd
  docker_container:
    name: rt-fluentd-1
    image: rt-fluentd:latest
    restart: yes
    recreate: yes
    state: started
    purge_networks: yes
    networks_cli_compatible: yes
    networks:
      - name: "stack"
#    volumes:
#      - ./fluentd/conf:/fluentd/etc
    ports:
     - "24224:24224"
     - "24224:24224/udp"
